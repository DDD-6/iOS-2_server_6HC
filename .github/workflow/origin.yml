name: Dev Release API

on:
  workflow_dispatch:

jobs:
  test-pytest:
    name: Test Pytest
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: [3.8]

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          pip install poetry && poetry config virtualenvs.create false && poetry install

      - name: Test with pytest
        run: |
          FLASK_ENV=testing python -m pytest --ignore=tests/p2p -x tests/ -n 5

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: test-pytest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_TEST_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_TEST_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: fargate-potato-app-dev
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f ./deploy/Dockerfile-fargate-dev .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      - name: Download task definition
        run: |
          aws ecs describe-task-definition --task-definition fargate-potato-api-dev --query taskDefinition > task-definition.json

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: potato-api-dev
          image: ${{ steps.build-image.outputs.image }}
          environment-variables: |
            DD_SERVICE=potato-api-dev

      - name: Deploy to Amazon ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: potato-api-dev
          cluster: glam-fargate-cluster
          wait-for-service-stability: false
          codedeploy-appspec: deploy/appspec-dev.yml
          codedeploy-application: AppECS-glam-fargate-cluster-potato-api-dev
          codedeploy-deployment-group: DgpECS-glam-fargate-cluster-potato-api-dev
